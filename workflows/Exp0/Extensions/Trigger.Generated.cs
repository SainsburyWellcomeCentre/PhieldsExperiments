//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Trigger
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Represents patch configuration parameters used in foraging experiments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Represents patch configuration parameters used in foraging experiments.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TriggerParameters
    {
    
        private double _probability = 0.5D;
    
        private double _angleThreshold = 1.57079633D;
    
        private double _refractoryPeriodSeconds = 60D;
    
        private double _timeInAreaThreshold = 0.5D;
    
        public TriggerParameters()
        {
        }
    
        protected TriggerParameters(TriggerParameters other)
        {
            _probability = other._probability;
            _angleThreshold = other._angleThreshold;
            _refractoryPeriodSeconds = other._refractoryPeriodSeconds;
            _timeInAreaThreshold = other._timeInAreaThreshold;
        }
    
        /// <summary>
        /// Specifies probability of a loom to be triggered
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="probability")]
        [System.ComponentModel.DescriptionAttribute("Specifies probability of a loom to be triggered")]
        public double Probability
        {
            get
            {
                return _probability;
            }
            set
            {
                _probability = value;
            }
        }
    
        /// <summary>
        /// Specifies Angle between Subject and point to be triggered
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="angleThreshold")]
        [System.ComponentModel.DescriptionAttribute("Specifies Angle between Subject and point to be triggered")]
        public double AngleThreshold
        {
            get
            {
                return _angleThreshold;
            }
            set
            {
                _angleThreshold = value;
            }
        }
    
        /// <summary>
        /// Specifies minimum time without Triggers after one
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="refractoryPeriodSeconds")]
        [System.ComponentModel.DescriptionAttribute("Specifies minimum time without Triggers after one")]
        public double RefractoryPeriodSeconds
        {
            get
            {
                return _refractoryPeriodSeconds;
            }
            set
            {
                _refractoryPeriodSeconds = value;
            }
        }
    
        /// <summary>
        /// Specifies threshold time for subject to be within specified region to be triggered
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timeInAreaThreshold")]
        [System.ComponentModel.DescriptionAttribute("Specifies threshold time for subject to be within specified region to be triggere" +
            "d")]
        public double TimeInAreaThreshold
        {
            get
            {
                return _timeInAreaThreshold;
            }
            set
            {
                _timeInAreaThreshold = value;
            }
        }
    
        public System.IObservable<TriggerParameters> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TriggerParameters(this)));
        }
    
        public System.IObservable<TriggerParameters> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TriggerParameters(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("probability = " + _probability + ", ");
            stringBuilder.Append("angleThreshold = " + _angleThreshold + ", ");
            stringBuilder.Append("refractoryPeriodSeconds = " + _refractoryPeriodSeconds + ", ");
            stringBuilder.Append("timeInAreaThreshold = " + _timeInAreaThreshold);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<TriggerParameters> source)
        {
            return Process<TriggerParameters>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TriggerParameters>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<TriggerParameters>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}